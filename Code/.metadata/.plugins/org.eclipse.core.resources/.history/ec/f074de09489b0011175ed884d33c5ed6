package tests;

import static org.junit.Assert.*;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.awt.geom.Point2D;
import java.io.File;
import java.util.ArrayList;

import game.Game;
import game.Session;

import org.junit.Test;

/**
 * Tests everything in the game class.
 *
 * @author schuenjr.
 *         Created Apr 13, 2012.
 */
public class TestsforGame {

	/**
	 * Makes sure that a game can be created.
	 */
	@Test
	public void testGameisCreated() {
		Game test = new Game();
		assertEquals(test.getClass(), Game.class);
	}
	
	/**
	 * Makes sure that a game can create a session.
	 */
	@Test
	public void testSessionisCreated() {
		Game test = new Game();
		Session s = new Session();
		test.setCurrentSession(s);
		assertEquals(test.getCurrentSession(), s);
	}
	
	/**
	 * Makes sure that the game can change sessions.
	 */
	@Test
	public void testSessionCanBeChanged() {
		Game test = new Game();
		Session s1 = new Session();
		Session s2 = new Session(new ArrayList<Point2D.Double>());
		test.setCurrentSession(s1);
		test.setCurrentSession(s2);
		assertEquals(test.getCurrentSession(), s2);
	}

	/**
	 * TODO Put here a description of what this method does. 
	 * @throws AWTException 
	 *
	 */
	@Test
	public void testTimeIsTrackedCorrectly() throws AWTException {
		Game test = new Game();
		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_ENTER);
		//robot.delay(25000);
		assertEquals(20.00, test.getTime(), 0.01);
	}
	
	/**
	 * TODO Put here a description of what this method does. 
	 * @throws AWTException 
	 *
	 */
	@Test
	public void testSpeedStaysConstant() throws AWTException {
		Game test = new Game();
		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.delay(1000);
		assertEquals(2, test.getCurrentSession().getBike().getSpeed(), 0.1);
	}
	
	/**
	 * TODO Put here a description of what this method does. 
	 * @throws AWTException 
	 *
	 */
	@Test
	public void testSpeedIncreases() throws AWTException {
		Game test = new Game();
		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.delay(1000);
		assertEquals(2, test.getCurrentSession().getBike().getSpeed(), 0.1);
	}
	
	/**
	 * TODO Put here a description of what this method does. 
	 * @throws AWTException 
	 *
	 */
	@Test
	public void testSpeedDoesntPassMax() throws AWTException {
		Game test = new Game();
		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.delay(1000);
		assertEquals(2, test.getCurrentSession().getBike().getSpeed(), 0.1);
	}
	
	/**
	 * TODO Put here a description of what this method does. 
	 * @throws AWTException 
	 *
	 */
	@Test
	public void testSpeedGoesToZero() throws AWTException {
		Game test = new Game();
		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.delay(1000);
		assertEquals(2, test.getCurrentSession().getBike().getSpeed(), 0.1);
	}
	
	/**
	 * TODO Put here a description of what this method does. 
	 * @throws AWTException 
	 *
	 */
	@Test
	public void testSpeedGoesBackwards() throws AWTException {
		Game test = new Game();
		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.delay(1000);
		assertEquals(2, test.getCurrentSession().getBike().getSpeed(), 0.1);
	}
	
	/**
	 * TODO Put here a description of what this method does. 
	 * @throws AWTException 
	 *
	 */
	@Test
	public void testSpeedGoesBackwardToMax() throws AWTException {
		Game test = new Game();
		Robot robot = new Robot();
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.delay(1000);
		assertEquals(2, test.getCurrentSession().getBike().getSpeed(), 0.1);
	}
}
