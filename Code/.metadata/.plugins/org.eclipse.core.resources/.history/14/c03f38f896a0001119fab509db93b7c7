package game;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.Locale;
import java.util.ResourceBundle;

import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;

public class GUI extends JFrame{

	/**
	 */
	private static final long serialVersionUID = 1L;
	private JPanel buttonHolder;
	private Session currentSession;
	private GUI g = this;
	private ResourceBundle messages;
	private Locale aLocale;

	private JRadioButton englishButton;
	private JRadioButton spanishButton;
	protected JButton playButton;
	//protected MainScreen mainMenu;
	private Graphics2D graphics;
	private JMenuBar menu;
	public GUI(Session session){
		this.setSize(800, 450);
		this.setTitle("");
		this.setVisible(true);
		setResizable(false);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.graphics = (Graphics2D) this.getGraphics();
		initScreen("en", "US");
		try {
			drawScreen(this.graphics);
		} catch (IOException e) {
			e.printStackTrace();
		}
		

	}
	
	private void initScreen(String l, String c) {
		//this.setLayout(null);
		this.setBackground(Color.WHITE);
		this.graphics.setBackground(Color.WHITE);
		this.aLocale = new Locale(l, c);
		this.messages = ResourceBundle.getBundle("MessagesBundle", this.aLocale);
		this.menu = new JMenuBar();
		setUpMenu(this.menu, this.messages);
		setJMenuBar(this.menu);
		 this.buttonHolder = new JPanel();
		this.englishButton = new JRadioButton(this.messages.getString("English"));
		this.spanishButton = new JRadioButton(this.messages.getString("Spanish"));
		this.playButton = new JButton(this.messages.getString("Start"));
		playButton.setFont(new Font("Broadway", Font.PLAIN, 32));
		playButton.setBackground(Color.WHITE);
		playButton.setBounds(433, 286, 200, 75);
		englishButton.setBounds(533, 185, 100, 20);
		spanishButton.setBounds(533, 205, 100, 20);
		spanishButton.setBackground(Color.WHITE);
		englishButton.setBackground(Color.WHITE);
		this.buttonHolder.setLayout(null);
		this.add(this.englishButton);
		this.add(this.spanishButton);
		this.buttonHolder.add(this.playButton);
		buttonHolder.setBounds(433, 286, 200, 75);
		this.add(buttonHolder);
		englishButton.setSelected(true);
		this.englishButton.addActionListener(new ActionListener() {
					
					@Override
					public void actionPerformed(ActionEvent e) {
						GUI.this.getContentPane().removeAll();
						update(getGraphics());
						initScreen("en", "US");
						try {
							drawScreen(GUI.this.graphics);
						} catch (IOException g) {
							g.printStackTrace();
						}
						System.out.println(GUI.this.messages.getString("Title"));
						englishButton.setSelected(true);
						spanishButton.setSelected(false);
					}
				});
		this.spanishButton.addActionListener(new ActionListener() {	
			@Override
			public void actionPerformed(ActionEvent arg0) {
				GUI.this.getContentPane().removeAll();
				update(getGraphics());
				initScreen("es", "ES");
				try {
					drawScreen(GUI.this.graphics);
				} catch (IOException e) {
					e.printStackTrace();
				}
				System.out.println(GUI.this.messages.getString("Title"));
				englishButton.setSelected(false);
				spanishButton.setSelected(true);
						
			}
		});
		playButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				playButton.setVisible(false);
				englishButton.setVisible(false);
				spanishButton.setVisible(false);
				LevelFrame level = new LevelFrame();
				g.add(level);
				g.remove(playButton);
				g.remove(englishButton);
				g.remove(spanishButton);
				g.remove(buttonHolder);
			}
		});
		
	}

	private void setUpMenu(JMenuBar menu, final ResourceBundle r){
		JMenu help = new JMenu(this.messages.getString("Help"));
		JMenuItem directions = new JMenuItem(this.messages.getString("Directions"));
		directions.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				JOptionPane
						.showMessageDialog(g,
								r.getString("Directions_Menu"),
								r.getString("Directions"), JOptionPane.PLAIN_MESSAGE);
			}
		});
		help.add(directions);
		JMenuItem about = new JMenuItem(r.getString("About"));
		about.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				JOptionPane
						.showMessageDialog(g,
								r.getString("About_Menu"),
								r.getString("About"), JOptionPane.PLAIN_MESSAGE);
			}
		});
		help.add(about);
		menu.add(help);
	}
	private void drawScreen(Graphics2D graphics) throws IOException {
		Image img = ImageIO.read(new File("dirt-bike-clipart.jpg"));
		
		this.graphics.drawImage(img, 10, 100, null);
		int screenRes = Toolkit.getDefaultToolkit().getScreenResolution();
	    int fontSize = (int)Math.round(12.0 * screenRes / 24.0);
	    
	    Font font = new Font("Broadway", Font.PLAIN, fontSize);
	    
	    this.graphics.setFont(font);
	    //this.graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
	    if(this.aLocale.getCountry() == "US"){
		    this.graphics.drawString(this.messages.getString("Bike"), 375, 100);
		    this.graphics.drawString(this.messages.getString("Racer"), 410, 155);
	    }
	    if(this.aLocale.getCountry() == "ES"){
		    this.graphics.drawString(this.messages.getString("Bike"), 180, 100);
		    this.graphics.drawString(this.messages.getString("Racer"), 285, 160);
	    }
	    if(this.aLocale.getCountry() == "US"){
		    this.graphics.setFont(new Font("Arial", Font.PLAIN, 14));
		    this.graphics.drawString(this.messages.getString("Choose_Language"), 410, 250);	
	    }
	    if(this.aLocale.getCountry() == "ES"){
		    this.graphics.setFont(new Font("Arial", Font.PLAIN, 14));
		    this.graphics.drawString(this.messages.getString("Choose_Language"), 440, 250);	
	    }
		
	}

	public void setCurrentSession(Session currentSession) {
		this.currentSession = currentSession;
	}

	public Session getCurrentSession() {
		return currentSession;
	}
	
}
